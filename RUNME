#!/bin/sh
# 
# Copyright (C) 2011-2020 Neil McGill
#
# This game is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This game is distributed in the hope that it will be fun,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this game; if not, write to the Free
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

. ./scripts/common.sh

cat <<%%

     .d8888b.                                     888 d8b          888      
    d88P  Y88b                                    888 Y8P          888      
    888    888                                    888              888      
    888         .d88b.  888d888 888  888 88888b.  888 888  .d8888b 88888b.  
    888  88888 d88""88b 888P"   888  888 888 "88b 888 888 d88P"    888 "88b 
    888    888 888  888 888     888  888 888  888 888 888 888      888  888 
    Y88b  d88P Y88..88P 888     Y88b 888 888  888 888 888 Y88b.    888  888 
     "Y8888P88  "Y88P"  888      "Y88888 888  888 888 888  "Y8888P 888  888 
                                     888                                    
                                Y8b d88P                                    
                                 "Y88P"                                     

%%

/bin/rm -f data/gorynlich-hiscore.txt data/gorynlich-config.txt

#
# Make the ramdisk
#
RAMDISK_FILES=.ramdisk_files

log_info "Creating ramdisk filelist"

find data -type f | grep -v Resources | grep -v DS_Store | grep -v "\.ttf$" > $RAMDISK_FILES
if [ ! -s $ramdisk_files ]
then
    cd src
    log_die "Failed to build list of ramdisk files"
fi

mkdir src/asm
scripts/RUNME.ramdisk.pl $RAMDISK_FILES

/bin/rm -f $RAMDISK_FILES

#
# Make the makefile
#
cd src


rm Makefile
cat Makefile.base | sed '/DO NOT DELETE/,$d' > Makefile.tmp
mv Makefile.tmp Makefile

if [ -x ../makedepend ]
then
    ../makedepend *.c -p .o/ 2>/dev/null
else
    makedepend *.c -p .o/ 2>/dev/null
fi

if [ $? -ne 0 ]
then
    log_warn "Is makedepend installed? If not:"
    log_warn "  For ubuntu do: sudo apt-get install xutils-dev"
    log_warn "  For MAC    do: sudo port install makedepend"
    log_warn "  For MingW  do: not supported AFAIK"
    echo
    log_warn "If you still can't find it, I have the source in third-party"
    log_warn "  cd third-party"
    log_warn "  tar xvf makedepend-1.0.5.tar"
    log_warn "  cd makedepend-1.0.5"
    log_warn "  ./configure"
    echo
    log_warn "Hit enter and I will try to build it for you"
    read dummy

    cd ..
    cd third-party
    tar xvf makedepend-1.0.5.tar
    cd makedepend-1.0.5
    ./configure
    make
    mv makedepend ../..
    cd ../..
    cd src
    ./makedepend *.c -p .o/ 2>/dev/null
fi

cd ..

for i in \
    /opt/local/bin/sdl2-config \
    /usr/bin/sdl2-config 
do
    if [ -x $i ]
    then
        SDL2_CONFIG=$i
        break
    fi
done

for i in \
    /opt/local/bin/sdl2-config \
    /usr/bin/sdl2-config \
    /usr/local/bin/sdl-config \
    /usr/bin/sdl-config
do
    if [ -x $i ]
    then
        SDL_CONFIG=$i
        break
    fi
done

if [ "$SDL_CONFIG" = "" ]
then
    log_warn "Is SDL 1.2 or 1.3 installed? If not:"
    log_warn "  For ubuntu SDL2 do: "
    log_warn "   sudo apt-get install libsdl2.0-dev"
    log_warn "   sudo apt-get install libsdl-mixer1.2-dev"
    log_warn "   sudo apt-get install libsdl-net1.2-dev"
    log_warn "  For ubuntu SDL1.2 do: "
    log_warn "   sudo apt-get install libsdl1.2-dev"
    log_warn "   sudo apt-get install libsdl-mixer1.2-dev"
    log_warn "   sudo apt-get install libsdl-net1.2-dev"
    log_warn "  For macos, install Mac ports and then do: "
    log_warn "   sudo port install libsdl2"
    log_warn "   sudo port install libsdl2_image"
    log_warn "   sudo port install libsdl2_mixer"
    log_warn "  Or:"
    log_warn "   Grab SDL from:"
    log_warn "   svn co https://svn.sourceforge.net/svnroot/goblinhack/trunk goblinhack"
    log_warn "  Or last resort:"
    log_warn "   A copy of SDL-1.2.14.tar.gz can be found in support/"
    exit 1
fi

#
# Gives warings at runtime on MACOS
#
SDL_LIBS=`$SDL_CONFIG --static-libs`

if [ $? -ne 0 ]
then
    log_err "Please install SDL 1.2 or 1.3. $SDL_CONFIG failed."
    log_err "SDL-1.2.14.tar.gz is in support/"
    exit 1
fi

SDL_FLAGS=`$SDL_CONFIG --cflags`
if [ $? -ne 0 ]
then
    log_err "Please install SDL 1.2 or 1.3. $SDL_CONFIG failed."
    log_err "SDL-1.2.14.tar.gz is in support/"
    exit 1
fi

log_info "SDL version:" `$SDL_CONFIG --version`
log_info "  ($SDL_CONFIG)"

#
# -funwind-tables and -rdynamic for backtrace info on linux.
# But it seemed to help little.
#
LDLIBS="$SDL_LIBS"

if [ "$SDL2_CONFIG" != "" ]
then
#    LDLIBS="$LDLIBS -lSDL2_ttf"
    LDLIBS="$LDLIBS -lSDL2_mixer"
    LDLIBS="$LDLIBS -lSDL2_net"
else
#    LDLIBS="$LDLIBS -lSDL_ttf"
    LDLIBS="$LDLIBS -lSDL_mixer"
    LDLIBS="$LDLIBS -lSDL_net"
fi

#
# for backtraces, but it doesn't help much
#
LDLIBS="$LDLIBS -funwind-tables -rdynamic"

case `uname` in
    *MINGW*)
	EXE=".exe"
	LDLIBS="$LDLIBS -lopengl32"
	;;
    *Darwin*)
	EXE=""
	;;
    *)
	EXE=""
	LDLIBS="$LDLIBS -lGL"
	;;
esac

cd src

echo "COMPILER_FLAGS=-Werror -g -ggdb3 -O0 $SDL_FLAGS # AUTOGEN" >> .Makefile
echo "COMPILER_FLAGS=-Werror -g -ggdb3 -O2 $SDL_FLAGS # AUTOGEN" > .Makefile
echo "    " >> .Makefile
echo "CLANG_COMPILER_WARNINGS=-Wall -fmessage-length=0 -fdiagnostics-print-source-range-info -fdiagnostics-show-category=id -fdiagnostics-parseable-fixits -Wno-trigraphs -Wmissing-prototypes -Wreturn-type -Wparentheses -Wswitch -Wno-unused-parameter -Wunused-variable -Wunused-value -Wno-sign-conversion # AUTOGEN" >> .Makefile
echo "GCC_COMPILER_WARNINGS=-Wall -fmessage-length=0 -Wno-trigraphs -Wmissing-prototypes -Wreturn-type -Wparentheses -Wswitch -Wno-unused-parameter -Wunused-variable -Wunused-value # AUTOGEN" >> .Makefile
echo "GXX_COMPILER_WARNINGS=-Wall -fmessage-length=0 -Wno-trigraphs -Wreturn-type -Wparentheses -Wswitch -Wno-unused-parameter -Wunused-variable -Wunused-value # AUTOGEN" >> .Makefile

`clang --version >/dev/null 2>/dev/null`
if [ $? -eq 0 ]
then
    echo "COMPILER_WARNINGS=\$(GCC_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
    echo "COMPILER_WARNINGS=\$(GXX_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
    echo "COMPILER_WARNINGS=\$(CLANG_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
    echo "CC=clang # AUTOGEN" >> .Makefile
    echo "# CC=gcc # AUTOGEN" >> .Makefile
    echo "# CC=cc # AUTOGEN" >> .Makefile
    echo "# CC=g++ # AUTOGEN" >> .Makefile
else
    `gcc --version >/dev/null 2>/dev/null`
    if [ $? -eq 0 ]
    then
        echo "COMPILER_WARNINGS=\$(CLANG_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
        echo "COMPILER_WARNINGS=\$(GXX_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
        echo "COMPILER_WARNINGS=\$(GCC_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
	echo "# CC=clang # AUTOGEN" >> .Makefile
	echo "CC=gcc # AUTOGEN" >> .Makefile
	echo "# CC=cc # AUTOGEN" >> .Makefile
	echo "# CC=g++ # AUTOGEN" >> .Makefile
    else
	`g++ --version >/dev/null 2>/dev/null`
	if [ $? -eq 0 ]
	then
            echo "COMPILER_WARNINGS=\$(CLANG_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
            echo "COMPILER_WARNINGS=\$(GCC_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
            echo "COMPILER_WARNINGS=\$(GXX_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
	    echo "# CC=clang # AUTOGEN" >> .Makefile
	    echo "# CC=gcc # AUTOGEN" >> .Makefile
	    echo "# CC=cc # AUTOGEN" >> .Makefile
	    echo "CC=g++ # AUTOGEN" >> .Makefile
	else
            echo "COMPILER_WARNINGS=\$(CLANG_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
            echo "COMPILER_WARNINGS=\$(GXX_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
            echo "COMPILER_WARNINGS=\$(GCC_COMPILER_WARNINGS) # AUTOGEN" >> .Makefile
	    echo "# CC=clang # AUTOGEN" >> .Makefile
	    echo "# CC=gcc # AUTOGEN" >> .Makefile
	    echo "# CC=cc # AUTOGEN" >> .Makefile
	    echo "CC=g++ # AUTOGEN" >> .Makefile
	fi
    fi
fi

echo "    " >> .Makefile
echo "EXE=$EXE # AUTOGEN" >> .Makefile
echo "LDLIBS=$LDLIBS # AUTOGEN" >> .Makefile
echo "CFLAGS=\$(COMPILER_FLAGS) \$(COMPILER_WARNINGS) # AUTOGEN" >> .Makefile

cat Makefile | grep -v AUTOGEN | grep -v "^    $" >> .Makefile

if [ -s .Makefile ]
then
    mv .Makefile Makefile
    if [ ! -f Makefile ]
    then
	log_err "No makefile?!"
	exit 1
    fi
else 
    log_err "Makefile create fail?!"
    exit 1
fi

log_info "Cleaning"
make clobber | sed 's/^/  /g'

CORES=""

case `uname` in
    *Darwin*)
	CORES=`/usr/sbin/system_profiler -detailLevel full SPHardwareDataType  | grep Cores | sed 's/.*: //g'`
    ;;

    *inux*)
	CORES=`cat /proc/cpuinfo | grep "cpu cores" | head -1 | awk '{print $4}'`
    ;;
esac

if [ "$CORES" != "" ]
then
    CORES="-j $CORES"
fi

log_info "Compiling"
make $CORES $* all

if [ $? -eq 0 ]
then
    echo
    log_info "Run gorynlich to start"

    rm -f Makefile.bak
else
    cd ..
    log_die "Build failed"
fi

cd ..
